buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'curseforge'

ext.config = parseConfig(file('build.properties'))
ext.modVersion = "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revision}"

version = "${config.version.minecraft}-${modVersion}"
group= "com.dave.ccfactorymanager" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ccfactorymanager"

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "eclipse"

    replaceIn "reference/Reference.java"
    replace "@MAJOR@", config.version.mod.major
    replace "@MINOR@", config.version.mod.minor
    replace "@REVISION@", config.version.mod.revision
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

allprojects {
    if (System.getenv("TRAVIS") != null) {
        def tag = System.getenv("TRAVIS_TAG");
        if (tag != null && !tag.isEmpty()) {
            project.ext.releaseType = tag.contains("pre") ? "alpha" : "release"
            version += tag.contains("pre") ? "-b${System.getenv("TRAVIS_BUILD_NUMBER")}" : ""
        } else {
            version += "-b${System.getenv("TRAVIS_BUILD_NUMBER")}"
            project.ext.releaseType = "alpha"
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

curse {
    onlyIf {
        (!System.env.TRAVIS_TAG.isEmpty() || getCommitMsg.commitMsg().contains("[cf push]")) && System.env.CFKEY != null
    }

    apiKey = System.env.CFKEY
    projectId = "229238"
    changelog = """
            See https://github.com/thraaawn/CCFactoryManager
    """
    releaseType = project.hasProperty('releaseType') ? project.releaseType : ""
}

task getCommitMsg(type: Exec) {
    def commit = System.env.TRAVIS_COMMIT != null ? System.env.TRAVIS_COMMIT : ""
    commandLine "git log --format=%B -n 1 ${commit}".split(' ')
    standardOutput = new ByteArrayOutputStream()
    ext.commitMsg = {
        return standardOutput.toString()
    }
}

curse.dependsOn getCommitMsg

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
